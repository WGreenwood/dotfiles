#!/usr/bin/env python3
import os
# from os import path


def get_process_pids():
    uid = os.getuid()
    for pid in os.listdir('/proc'):
        if not pid.isdigit():
            continue
        try:
            if os.stat(f'/proc/{pid}').st_uid != uid:
                continue
        except FileNotFoundError:
            continue
        yield int(pid)


def get_process_args(pid: int):
    try:
        with open(f'/proc/{pid}/cmdline') as f:
            data = f.read()
            return list(filter(
                None,
                data.split('\x00')
            ))
    except IOError:
        pass
    return None


def parse_args():
    from argparse import ArgumentParser
    from sys import argv

    parser = ArgumentParser(
        description='Gets pid\'s of a specific process, optionally filtering by arguments'  # noqa: E501
    )
    parser.add_argument(
        'appname',
        action='store',
        help='The app name to search for'
    )
    parser.add_argument(
        '--findarg',
        action='store',
        help='Only return processes that have this argument in their arguments'
    )
    return parser.parse_args(argv[1:])


def main():
    args = parse_args()
    for pid in get_process_pids():
        pargs = get_process_args(pid)
        if len(pargs) == 0 or pargs[0] != args.appname:
            continue

        if args.findarg is not None \
                and args.findarg not in pargs:
            continue
        print(pid)


if __name__ == '__main__':
    main()
